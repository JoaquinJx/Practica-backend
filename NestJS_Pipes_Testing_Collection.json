{
	"info": {
		"_postman_id": "12345678-1234-1234-1234-123456789abc",
		"name": "NestJS Pipes Testing",
		"description": "Colección completa para probar pipes y validaciones en la API NestJS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Health Check",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/public/health",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"public",
						"health"
					]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Health check response\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"ok\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "2. Crear Usuario Admin (Pipes)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \" ADMIN@TEST.COM \",\n  \"password\": \"SecurePass123\",\n  \"name\": \" john  doe \",\n  \"role\": \" admin \"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"User created with normalized data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.email).to.eql(\"admin@test.com\");",
							"    pm.expect(jsonData.name).to.eql(\"John Doe\");",
							"    pm.expect(jsonData.role).to.eql(\"admin\");",
							"    ",
							"    // Guardar userId para tests posteriores",
							"    pm.collectionVariables.set(\"userId\", jsonData.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "3. Login Admin",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"admin@test.com\",\n  \"password\": \"SecurePass123\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/auth/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Token received\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.access_token).to.exist;",
							"    ",
							"    // Guardar token para requests autenticados",
							"    pm.collectionVariables.set(\"token\", jsonData.access_token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "4. Obtener Perfil (Protegido)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/profile",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"profile"
					]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Profile data received\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.email).to.exist;",
							"    pm.expect(jsonData.name).to.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "5. Buscar por Email (EmailPipe)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/search/email/ ADMIN@TEST.COM ",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"search",
						"email",
						" ADMIN@TEST.COM "
					]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Email was normalized\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.email).to.eql(\"admin@test.com\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "6. Listar Usuarios (Query Pipes)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users?page=1&limit=5&role=admin",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "role",
							"value": "admin"
						}
					]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Pagination and filters applied\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.filters.page).to.eql(1);",
							"    pm.expect(jsonData.filters.limit).to.eql(5);",
							"    pm.expect(jsonData.filters.role).to.eql(\"admin\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "7. Obtener Usuario por ID (ParseUUIDPipe)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"User data received\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.exist;",
							"    pm.expect(jsonData.email).to.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "8. Cambiar Rol (RoleValidationPipe)",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"role\": \" MODERATOR \"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}/role",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}",
						"role"
					]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Role was normalized\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.role).to.eql(\"moderator\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "9. Actualizar Perfil (ValidationPipe)",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \" jane  smith \",\n  \"avatarUrl\": \"https://example.com/avatar.jpg\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/profile",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"profile"
					]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Profile updated with transformations\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(\"Jane Smith\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "ERROR: Email Inválido",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"invalid-email\",\n  \"password\": \"SecurePass123\",\n  \"name\": \"John Doe\",\n  \"role\": \"user\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Email validation error\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"email\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "ERROR: Password Débil",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"test@test.com\",\n  \"password\": \"123\",\n  \"name\": \"John Doe\",\n  \"role\": \"user\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Password validation error\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"password\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "ERROR: Rol Inválido",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"role\": \"invalid_role\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}/role",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}",
						"role"
					]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Role validation error\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"role\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "ERROR: UUID Inválido",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/invalid-uuid",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"invalid-uuid"
					]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"UUID validation error\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"uuid\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "ERROR: Sin Autorización",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Unauthorized error\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"Unauthorized\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3001",
			"type": "string"
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		}
	]
}
